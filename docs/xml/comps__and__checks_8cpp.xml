<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="comps__and__checks_8cpp" kind="file" language="C++">
    <compoundname>comps_and_checks.cpp</compoundname>
    <includes refid="protos_8h" local="yes">protos.h</includes>
    <incdepgraph>
      <node id="9">
        <label>sys/stat.h</label>
      </node>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>comps_and_checks.cpp</label>
        <link refid="comps__and__checks_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>fcntl.h</label>
      </node>
      <node id="8">
        <label>sys/types.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>protos.h</label>
        <link refid="protos_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="comps__and__checks_8cpp_1a081a6c26b3871f66f9f33cf485749d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_txt</definition>
        <argsstring>(const char c)</argsstring>
        <name>is_txt</name>
        <param>
          <type>const char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks if c is a letter/number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>char to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if is a letter/number </para>
</simplesect>
<simplesect kind="return"><para>false - in any other case </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="comps_and_checks.cpp" line="9" column="6" bodyfile="comps_and_checks.cpp" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="comps__and__checks_8cpp_1a0c387f083e01e98270406f842e5539fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int comp_str</definition>
        <argsstring>(const void *line1, const void *line2)</argsstring>
        <name>comp_str</name>
        <param>
          <type>const void *</type>
          <declname>line1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>line2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>\brief Compares two strings, straight
\param line1 first line
\param line2 second line
\return -1 if line1 &lt; line2
\return 0 if line1 = line2
\return 1 if line1 &gt; line2
</verbatim> Compares two strings the straight way prepares strings for comp_core with delta = 1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="comps_and_checks.cpp" line="28" column="5" bodyfile="comps_and_checks.cpp" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="comps__and__checks_8cpp_1a00852f5c07f148bb1645a9ab3c7c5763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int comp_arabic</definition>
        <argsstring>(const void *line1, const void *line2)</argsstring>
        <name>comp_arabic</name>
        <param>
          <type>const void *</type>
          <declname>line1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>line2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>\brief Compares two strings, reverse
\param line1 first line
\param line2 second line
\return -1 if line1 &lt; line2 in reverse
\return 0 if line1 = line2
\return 1 if line1 &gt; line2 in reverse
</verbatim> Compares two strings in reverse Prepares strings for comp_core with delta = -1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="comps_and_checks.cpp" line="48" column="5" bodyfile="comps_and_checks.cpp" bodystart="48" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="comps__and__checks_8cpp_1aa0fbc2bf8621745b9b60c6b64610c62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int comp_core</definition>
        <argsstring>(line fst, line scd, int delta)</argsstring>
        <name>comp_core</name>
        <param>
          <type><ref refid="structline" kindref="compound">line</ref></type>
          <declname>fst</declname>
        </param>
        <param>
          <type><ref refid="structline" kindref="compound">line</ref></type>
          <declname>scd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>\brief Core of comparison
\param line1 first line
\param line2 second line
\param delta number that is added to lft of each string on each turn
\return -1 - line1 &lt; line2 with current delta
\return 0 - line1 = line2
\return 1 - line1 &gt; line2 with current delta
</verbatim> Compares two strings, where lft points to the beginning of string, rgt - to element next after end of string Uses delta to move ptrs that lets sort strings in reverse </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="comps_and_checks.cpp" line="83" column="5" bodyfile="comps_and_checks.cpp" bodystart="83" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="protos_8h" kindref="compound">protos.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="comps__and__checks_8cpp_1a081a6c26b3871f66f9f33cf485749d7d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="comps__and__checks_8cpp_1a081a6c26b3871f66f9f33cf485749d7d" kindref="member">is_txt</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>and<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>and<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>and<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="comps__and__checks_8cpp_1a0c387f083e01e98270406f842e5539fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="comps__and__checks_8cpp_1a0c387f083e01e98270406f842e5539fe" kindref="member">comp_str</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>line1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>line2)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structline" kindref="compound">line</ref><sp/>fst<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structline" kindref="compound">line</ref>*)<sp/>line1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structline" kindref="compound">line</ref><sp/>scd<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structline" kindref="compound">line</ref>*)<sp/>line2);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="comps__and__checks_8cpp_1aa0fbc2bf8621745b9b60c6b64610c62e" kindref="member">comp_core</ref><sp/>(fst,<sp/>scd,<sp/>1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="comps__and__checks_8cpp_1a00852f5c07f148bb1645a9ab3c7c5763" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="comps__and__checks_8cpp_1a00852f5c07f148bb1645a9ab3c7c5763" kindref="member">comp_arabic</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>line1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>line2)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structline" kindref="compound">line</ref><sp/>fst<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structline" kindref="compound">line</ref>*)<sp/>line1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structline" kindref="compound">line</ref><sp/>scd<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structline" kindref="compound">line</ref>*)<sp/>line2);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>--;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>--;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>--;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>--;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>temp<sp/>=<sp/>fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>=<sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>=<sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="comps__and__checks_8cpp_1aa0fbc2bf8621745b9b60c6b64610c62e" kindref="member">comp_core</ref><sp/>(fst,<sp/>scd,<sp/>-1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="comps__and__checks_8cpp_1aa0fbc2bf8621745b9b60c6b64610c62e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="comps__and__checks_8cpp_1aa0fbc2bf8621745b9b60c6b64610c62e" kindref="member">comp_core</ref><sp/>(<ref refid="structline" kindref="compound">line</ref><sp/>fst,<sp/><ref refid="structline" kindref="compound">line</ref><sp/>scd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="comps__and__checks_8cpp_1a081a6c26b3871f66f9f33cf485749d7d" kindref="member">is_txt</ref><sp/>(*fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>)<sp/>and<sp/>fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>!=<sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>)<sp/>fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="comps__and__checks_8cpp_1a081a6c26b3871f66f9f33cf485749d7d" kindref="member">is_txt</ref><sp/>(*scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>)<sp/>and<sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>!=<sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>)<sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>==<sp/>*scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>and<sp/>fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>!=<sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref><sp/>and<sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>!=<sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>==<sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref><sp/>and<sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>!=<sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>!=<sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref><sp/>and<sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>==<sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>==<sp/>fst.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref><sp/>and<sp/>scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>==<sp/>scd.<ref refid="structline_1a9d8117828329e501e5d3a6fd93a3ef4f" kindref="member">rgt</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>&lt;=<sp/>*scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*fst.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref><sp/>&gt;<sp/>*scd.<ref refid="structline_1a2aa8bf75ce8dbb1642cc4075a49327f9" kindref="member">lft</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="comps_and_checks.cpp"/>
  </compounddef>
</doxygen>
